1. npm init in new project
2. npm install bower --save (bower is a package manager)
3. npm - for tooling (dev environment, automation tools like gulp or grunt) - server dependencies.
4. bower - focused on client side dependencies (things that run inside the browser)
5. two package manager's exists because of dependency models.
6. bower - flat dependency model.
7. npm install gulp gulp-connect --save
8. gulp - automation utility. (JS version) (grunt and broccoli are alternatives) - similar to rake in rails
9. gulp-connect : allows to run a webserver using gulp. (connect webserver - node based)
10. --save : all being remembered in package.json
11. sudo npm install -g bower : put the bower command on my system (global)
12. bower init
13. bower.json (bower's version of package.json)
14. .bowerrc - install dependencies in a directory where my browser cant reach, but still read.
    ranand@Anand-Rs-MacBook-Pro Day2 (master) $ cat .bowerrc
    {
      "directory": "www/bower_components"
    }
15. bower install angular --save (stored in the prev. mentioned directory)
16. bower install bootstrap --save
17. Resource : yeoman.io
18. angular apps don't do much without a webserver though they can load.
19. sudo npm install -g gulp
20. write gulpfile.js
21. gulp connect (brings up the server)
22. update gulpfile.js, type gulp in command.
23. We are going to create some navigation.
24. bower install angular-route --save / add to script
25. create app directory / app.js / add to script
26. we have access to configuration phase using .config
27. add routeProvider, but make sure the module depends on ngRoute
28. ng-view (in index.html) is needed once you start defining templates/routes to templates.
29. always provide otherwise in routeProvider as well.
30. create some directory structure (by adding menu directory and menu.html)
31. make sure to add new controllers as dependencies in the main module.
32. controllers - if two divs refer to same controller, its still two controllers. Since Angular finds
    the controller and creates a new instance. Use an ng-model and experiment in each div. It won't change
    in the second controller.
33. if one div is inside another div, things change (with ng-model) : scopes are related to one another based
    on html hierarchy.
34. $scope's inherit from $rootScope or within one another.
35. when reading, $scope looks up the hierarchy. (same ng-model name)
36. dot rule in angular??
37. scope is not the model, scope is where you put the models.
38. controller as syntax?? - giving controller an alias. (ng-controller = "FirstController as first") :
    explicit about where the models come from - as a result, automatically follow the dot rule.
39. we can fall back to using JS's this keyword instead of $scope in the controller.
40. capture 'this' ahead : var vm = this;
41. inject $log for logging.
42. every event kicks off a digest cycle. (digest cycle : maintain a huge hierarchy of keys, value (old and new),
    go through them, update them, do it over again.)
43. anything changes, refresh the DOM.
44. one way binding - it stops watching and digest cycle is complete after first time.
45. every bind gets a $watch. (observe in console) | ng-model also implies binding
46. $scope.$watch -> hooks you into the digest cycle.
47. The very first time, before entering vm.person.firstname (in watchExamples.js) -> console will throw
    an error. This is because there is no object called vm.person yet. Once you start typing, it will
    become alright.
48. Watchers are removed when scope is garbage collected.
49. watchGroup ??
50. deepwatch (setting true as the third param)
51. watchCollection
52. Resource : http://underscorejs.org/
53. Resource : https://lodash.com/
54. ng-change?
55. Don't call functions from your view. Angular's controller will get hit every single time without the
    intellisense that this event might not have changed. This is a performance hit.
56. the digest cycle is looked through a maximum of 10 times before an abort is called.
57. Resource : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
58. 'use strict'; - if you define global variable without definition, it will throw an error (an example)
59. 'use strict'; - can be used inside a function as well. It will limit itself to that scope.
60. IIFE - Immediately Invoked Function Expression.
61. IIFE vs Self invoking functions?? Self invoking are known as recursive functions?
62. JS supports ASI - Automatic Semicolon Insertion.
63. Resource : Learning JS design patterns (book)
64. Resource : Maintainable JS. (book)
65. gulp - use refs (plugin to annotate, uglify or minify)
66. Resource : gulp-inject (https://www.npmjs.com/package/gulp-inject)
67. Services - related code and data and put it under a name that can be injected.
68. .service or .factory or .value or .constant or .provider or .decorator (can be a SERVICE) -all singletons
69. CONST keyword in JS
70. .constant's are available during configuration. Other services are not.
71. with .value, you can change the value.
72. anything within .service -> angular treats this as a constructor (call with new)
73. Service vs factory : new is not called in factory. Whatever the function returns is the factory.
74. Services needs to be built like JS constructors.
75. Services were built for classes in typescript or coffeescript.
76. don't write constructors that return stuff.
77. factories can return by itself as well.
78. decorator - takes service/factory and augments it based on what is required.
79. providers - configurable service object and returns value using $get. $get is executed on run phase.
80.
